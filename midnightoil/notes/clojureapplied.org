#+TITLE: Clojure Applied Notes
#+AUTHOR: Jamal Burgess
#+TODO: READING(t) RESEARCH(r@/!) UNDERSTAND(u@/!) | DONE(d!) CANCELED(c@)


* Chapters
** DONE Model Your Domain
CLOSED: [2019-03-06 Wed 00:07]
When building entities it's better to create a record opposed to a standard map unless on the condition that you're modeling a public API.

#+begin_src clojure :result value
(defrecord Person [name age sex])
;; then you have constructor functions, naming conventions generally start with
;; make-, new-, map->, ex
(def me
  (map->Person {:name "jamal"
                :age 35
                :sex "Male"}))
me
#+end_src

#+RESULTS:
: midnightoil.ch1.money.Person#'midnightoil.ch1.money/me#midnightoil.ch1.money.Person{:name "jamal", :age 35, :sex "Male"}



** TODO Collect and Organize Your data

** TODO Processing Sequential Data

** TODO State, Identity and Change

** TODO Use Your Cores

** TODO Creating Components

** TODO Compose Your Application






* Links
   [[https://purelyfunctional.tv/guide/clojure-collections/][Eric Normand on Mastering Collections]]


#+BEGIN_SRC clojure :result
(reduce + [1 2 2 3 3 4 5])
#+END_SRC

#+BEGIN_SRC clojure :result value
(reduce + [1 44 5 6 4 3433 2323])
()
#+END_SRC

#+Results:
: 5816

